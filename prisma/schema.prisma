// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  email     String  @unique @db.VarChar(100)
  password  String  @db.VarChar(100)
  profile   Profile @relation(fields: [profileId], references: [profileId])
  profileId Int

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("Usuario")
}

model Profile {
  profileId Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  users     User[]

  profileModule ProfileModule[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("Perfil")
}

model Module {
  moduleId Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  
  profileModule ProfileModule[]
  moduleTransaction ModuleTransaction[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("Modulo")
}

model Transaction {
  transactionId Int     @id @default(autoincrement())
  name          String  @db.VarChar(100)
  
  moduleTransaction ModuleTransaction[]
  transactionFunction TransactionFunction[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("Transacao")
}

model Function {
  functionId Int     @id @default(autoincrement())
  name       String  @db.VarChar(100)
  
  transactionFunction TransactionFunction[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("Funcao")
}

model ProfileModule {
  profileId Int
  moduleId  Int
  profile   Profile @relation(fields: [profileId], references: [profileId])
  module    Module  @relation(fields: [moduleId], references: [moduleId])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@id([profileId, moduleId])
  @@map("Perfil_Modulo")
}

model ModuleTransaction {
  moduleId      Int
  transactionId Int
  module        Module      @relation(fields: [moduleId], references: [moduleId])
  transaction   Transaction @relation(fields: [transactionId], references: [transactionId])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@id([moduleId, transactionId])
  @@map("Modulo_Transacao")
}

model TransactionFunction {
  transactionId Int
  functionId    Int
  transaction   Transaction @relation(fields: [transactionId], references: [transactionId])
  function      Function    @relation(fields: [functionId], references: [functionId])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@id([transactionId, functionId])
  @@map("Transacao_Funcao")
}
